// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.1
// source: server.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Frequency int32

const (
	Frequency_F1Hz     Frequency = 0
	Frequency_F100Hz   Frequency = 1
	Frequency_F1000Hz  Frequency = 2
	Frequency_F10000Hz Frequency = 3
)

// Enum value maps for Frequency.
var (
	Frequency_name = map[int32]string{
		0: "F1Hz",
		1: "F100Hz",
		2: "F1000Hz",
		3: "F10000Hz",
	}
	Frequency_value = map[string]int32{
		"F1Hz":     0,
		"F100Hz":   1,
		"F1000Hz":  2,
		"F10000Hz": 3,
	}
)

func (x Frequency) Enum() *Frequency {
	p := new(Frequency)
	*p = x
	return p
}

func (x Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (Frequency) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Frequency.Descriptor instead.
func (Frequency) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type Schema struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Dataset   string                 `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Frequency Frequency              `protobuf:"varint,2,opt,name=frequency,proto3,enum=server.Frequency" json:"frequency,omitempty"`
	XMin      int32                  `protobuf:"zigzag32,3,opt,name=x_min,json=xMin,proto3" json:"x_min,omitempty"`
	XMax      int32                  `protobuf:"zigzag32,4,opt,name=x_max,json=xMax,proto3" json:"x_max,omitempty"`
	YMin      int32                  `protobuf:"zigzag32,5,opt,name=y_min,json=yMin,proto3" json:"y_min,omitempty"`
	YMax      int32                  `protobuf:"zigzag32,6,opt,name=y_max,json=yMax,proto3" json:"y_max,omitempty"`
	// SortOnInsert greatly speeds up querying based on timestamp because
	// it avoids a full scan of a pose just to find matching records.
	//
	// However, for high frequency inserts it adds a comparatively significant
	// amount of time to writes.
	//
	// Thus, a tradeoff needs making by the user
	SortOnInsert bool `protobuf:"varint,7,opt,name=sort_on_insert,json=sortOnInsert,proto3" json:"sort_on_insert,omitempty"`
	// LazyInitialAllocate disables pre-allocating every single X,Y coordinate
	// on initialisation, which can help with startup time and memory usage.
	//
	// Of course, if you expect to cover every possible location on the coords
	// map, with a high range of different theta values, then you want to set
	// this to false so performance is predictable
	LazyInitialAllocate bool `protobuf:"varint,8,opt,name=lazy_initial_allocate,json=lazyInitialAllocate,proto3" json:"lazy_initial_allocate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *Schema) GetFrequency() Frequency {
	if x != nil {
		return x.Frequency
	}
	return Frequency_F1Hz
}

func (x *Schema) GetXMin() int32 {
	if x != nil {
		return x.XMin
	}
	return 0
}

func (x *Schema) GetXMax() int32 {
	if x != nil {
		return x.XMax
	}
	return 0
}

func (x *Schema) GetYMin() int32 {
	if x != nil {
		return x.YMin
	}
	return 0
}

func (x *Schema) GetYMax() int32 {
	if x != nil {
		return x.YMax
	}
	return 0
}

func (x *Schema) GetSortOnInsert() bool {
	if x != nil {
		return x.SortOnInsert
	}
	return false
}

func (x *Schema) GetLazyInitialAllocate() bool {
	if x != nil {
		return x.LazyInitialAllocate
	}
	return false
}

type Query struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Dataset string                 `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Types that are valid to be assigned to X:
	//
	//	*Query_XAll
	//	*Query_XValue
	//	*Query_XRange
	X isQuery_X `protobuf_oneof:"x"`
	// Types that are valid to be assigned to Y:
	//
	//	*Query_YAll
	//	*Query_YValue
	//	*Query_YRange
	Y isQuery_Y `protobuf_oneof:"y"`
	// Types that are valid to be assigned to T:
	//
	//	*Query_TAll
	//	*Query_TValue
	//	*Query_TRange
	T isQuery_T `protobuf_oneof:"t"`
	// Types that are valid to be assigned to Time:
	//
	//	*Query_TimeAll
	//	*Query_TimeRange
	Time          isQuery_Time `protobuf_oneof:"time"`
	IndexKey      string       `protobuf:"bytes,10,opt,name=index_key,json=indexKey,proto3" json:"index_key,omitempty"`
	IndexValue    string       `protobuf:"bytes,11,opt,name=index_value,json=indexValue,proto3" json:"index_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *Query) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *Query) GetX() isQuery_X {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Query) GetXAll() bool {
	if x != nil {
		if x, ok := x.X.(*Query_XAll); ok {
			return x.XAll
		}
	}
	return false
}

func (x *Query) GetXValue() int32 {
	if x != nil {
		if x, ok := x.X.(*Query_XValue); ok {
			return x.XValue
		}
	}
	return 0
}

func (x *Query) GetXRange() *QueryRange {
	if x != nil {
		if x, ok := x.X.(*Query_XRange); ok {
			return x.XRange
		}
	}
	return nil
}

func (x *Query) GetY() isQuery_Y {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *Query) GetYAll() bool {
	if x != nil {
		if x, ok := x.Y.(*Query_YAll); ok {
			return x.YAll
		}
	}
	return false
}

func (x *Query) GetYValue() int32 {
	if x != nil {
		if x, ok := x.Y.(*Query_YValue); ok {
			return x.YValue
		}
	}
	return 0
}

func (x *Query) GetYRange() *QueryRange {
	if x != nil {
		if x, ok := x.Y.(*Query_YRange); ok {
			return x.YRange
		}
	}
	return nil
}

func (x *Query) GetT() isQuery_T {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Query) GetTAll() bool {
	if x != nil {
		if x, ok := x.T.(*Query_TAll); ok {
			return x.TAll
		}
	}
	return false
}

func (x *Query) GetTValue() int32 {
	if x != nil {
		if x, ok := x.T.(*Query_TValue); ok {
			return x.TValue
		}
	}
	return 0
}

func (x *Query) GetTRange() *QueryRange {
	if x != nil {
		if x, ok := x.T.(*Query_TRange); ok {
			return x.TRange
		}
	}
	return nil
}

func (x *Query) GetTime() isQuery_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Query) GetTimeAll() bool {
	if x != nil {
		if x, ok := x.Time.(*Query_TimeAll); ok {
			return x.TimeAll
		}
	}
	return false
}

func (x *Query) GetTimeRange() *TimeRange {
	if x != nil {
		if x, ok := x.Time.(*Query_TimeRange); ok {
			return x.TimeRange
		}
	}
	return nil
}

func (x *Query) GetIndexKey() string {
	if x != nil {
		return x.IndexKey
	}
	return ""
}

func (x *Query) GetIndexValue() string {
	if x != nil {
		return x.IndexValue
	}
	return ""
}

type isQuery_X interface {
	isQuery_X()
}

type Query_XAll struct {
	XAll bool `protobuf:"varint,12,opt,name=x_all,json=xAll,proto3,oneof"`
}

type Query_XValue struct {
	XValue int32 `protobuf:"zigzag32,2,opt,name=x_value,json=xValue,proto3,oneof"`
}

type Query_XRange struct {
	XRange *QueryRange `protobuf:"bytes,3,opt,name=x_range,json=xRange,proto3,oneof"`
}

func (*Query_XAll) isQuery_X() {}

func (*Query_XValue) isQuery_X() {}

func (*Query_XRange) isQuery_X() {}

type isQuery_Y interface {
	isQuery_Y()
}

type Query_YAll struct {
	YAll bool `protobuf:"varint,13,opt,name=y_all,json=yAll,proto3,oneof"`
}

type Query_YValue struct {
	YValue int32 `protobuf:"zigzag32,4,opt,name=y_value,json=yValue,proto3,oneof"`
}

type Query_YRange struct {
	YRange *QueryRange `protobuf:"bytes,5,opt,name=y_range,json=yRange,proto3,oneof"`
}

func (*Query_YAll) isQuery_Y() {}

func (*Query_YValue) isQuery_Y() {}

func (*Query_YRange) isQuery_Y() {}

type isQuery_T interface {
	isQuery_T()
}

type Query_TAll struct {
	TAll bool `protobuf:"varint,14,opt,name=t_all,json=tAll,proto3,oneof"`
}

type Query_TValue struct {
	TValue int32 `protobuf:"zigzag32,6,opt,name=t_value,json=tValue,proto3,oneof"`
}

type Query_TRange struct {
	TRange *QueryRange `protobuf:"bytes,7,opt,name=t_range,json=tRange,proto3,oneof"`
}

func (*Query_TAll) isQuery_T() {}

func (*Query_TValue) isQuery_T() {}

func (*Query_TRange) isQuery_T() {}

type isQuery_Time interface {
	isQuery_Time()
}

type Query_TimeAll struct {
	TimeAll bool `protobuf:"varint,8,opt,name=time_all,json=timeAll,proto3,oneof"`
}

type Query_TimeRange struct {
	TimeRange *TimeRange `protobuf:"bytes,9,opt,name=time_range,json=timeRange,proto3,oneof"`
}

func (*Query_TimeAll) isQuery_Time() {}

func (*Query_TimeRange) isQuery_Time() {}

type QueryRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"zigzag32,1,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"zigzag32,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRange) Reset() {
	*x = QueryRange{}
	mi := &file_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRange) ProtoMessage() {}

func (x *QueryRange) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRange.ProtoReflect.Descriptor instead.
func (*QueryRange) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QueryRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type TimeRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *TimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// A Record is a specific reading for a set of X,Y coordinates and
// a theta representing aspect.
//
// Alongside this, a Record includes metadata values and a float representing
// an actual value
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Meta  *Metadata              `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	X     int32                  `protobuf:"zigzag32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y     int32                  `protobuf:"zigzag32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	T     int32                  `protobuf:"zigzag32,3,opt,name=T,proto3" json:"T,omitempty"`
	// a Dataset is analogous to a database and is best thought of as
	// a specific location to be mapped, alongside a specific purpose.
	//
	// # For a racing bike it might be the race course
	//
	// # For an autonomous robot it might be a particular warehouse
	//
	// Ultimately, it provides some context toward what a X, Y, T value
	// actually means in practice
	Dataset string `protobuf:"bytes,4,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Value represents the actual value this record represents
	Value float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	// Name provides context for what a value is for
	Name          string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *Record) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Record) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Record) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Record) GetT() int32 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *Record) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *Record) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When is a pointer for when a Record is for; what that specifically
	// means (when the value was captured, the start of capture, when the
	// data was calculated, whatever) for a given dataset is up to the
	// client
	When *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=when,proto3" json:"when,omitempty"`
	// Labels are arbitrary key/values; they are not indexed and so can
	// be as unique or wide ranging or as wacky as you want... go nuts
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Indices are used to provide filtering and so come slighly more
	// expensively than labels.
	//
	// Beware the wrath of the cardinality gods
	Indices       map[string]string `protobuf:"bytes,3,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metadata) GetIndices() map[string]string {
	if x != nil {
		return x.Indices
	}
	return nil
}

// Version holds contains data pertaining to the version
// of xyt which is running
type VersionMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Ref       string                 `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	BuildUser string                 `protobuf:"bytes,2,opt,name=build_user,json=buildUser,proto3" json:"build_user,omitempty"`
	// We store this as a string, rather than a datetime, because
	// we never need to do anything clever with it, beyond showing it
	BuiltOn       string `protobuf:"bytes,3,opt,name=built_on,json=builtOn,proto3" json:"built_on,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionMessage) Reset() {
	*x = VersionMessage{}
	mi := &file_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionMessage) ProtoMessage() {}

func (x *VersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionMessage.ProtoReflect.Descriptor instead.
func (*VersionMessage) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *VersionMessage) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *VersionMessage) GetBuildUser() string {
	if x != nil {
		return x.BuildUser
	}
	return ""
}

func (x *VersionMessage) GetBuiltOn() string {
	if x != nil {
		return x.BuiltOn
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x78, 0x4d, 0x69, 0x6e, 0x12,
	0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04,
	0x78, 0x4d, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x04, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x61, 0x7a, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x05,
	0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x78,
	0x41, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d,
	0x0a, 0x07, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a,
	0x05, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04,
	0x79, 0x41, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x06, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x06, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15,
	0x0a, 0x05, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x04, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x02, 0x52, 0x06, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x07, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x02, 0x52, 0x06, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0x0a, 0x01, 0x78, 0x42, 0x03, 0x0a, 0x01, 0x79, 0x42, 0x03, 0x0a, 0x01, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x6b, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x01, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x77, 0x68, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x4f, 0x6e, 0x2a, 0x3c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x31, 0x48, 0x7a, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x31, 0x30, 0x30, 0x30, 0x48, 0x7a, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x31, 0x30, 0x30,
	0x30, 0x30, 0x48, 0x7a, 0x10, 0x03, 0x32, 0xdc, 0x01, 0x0a, 0x03, 0x58, 0x79, 0x74, 0x12, 0x35,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x79, 0x74, 0x2d, 0x64, 0x62, 0x2f, 0x78, 0x79, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData []byte
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_server_proto_rawDesc), len(file_server_proto_rawDesc)))
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_server_proto_goTypes = []any{
	(Frequency)(0),                // 0: server.Frequency
	(*Schema)(nil),                // 1: server.Schema
	(*Query)(nil),                 // 2: server.Query
	(*QueryRange)(nil),            // 3: server.QueryRange
	(*TimeRange)(nil),             // 4: server.TimeRange
	(*Record)(nil),                // 5: server.Record
	(*Metadata)(nil),              // 6: server.Metadata
	(*VersionMessage)(nil),        // 7: server.VersionMessage
	nil,                           // 8: server.Metadata.LabelsEntry
	nil,                           // 9: server.Metadata.IndicesEntry
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 11: google.protobuf.Empty
}
var file_server_proto_depIdxs = []int32{
	0,  // 0: server.Schema.frequency:type_name -> server.Frequency
	3,  // 1: server.Query.x_range:type_name -> server.QueryRange
	3,  // 2: server.Query.y_range:type_name -> server.QueryRange
	3,  // 3: server.Query.t_range:type_name -> server.QueryRange
	4,  // 4: server.Query.time_range:type_name -> server.TimeRange
	10, // 5: server.TimeRange.start:type_name -> google.protobuf.Timestamp
	10, // 6: server.TimeRange.end:type_name -> google.protobuf.Timestamp
	6,  // 7: server.Record.meta:type_name -> server.Metadata
	10, // 8: server.Metadata.when:type_name -> google.protobuf.Timestamp
	8,  // 9: server.Metadata.labels:type_name -> server.Metadata.LabelsEntry
	9,  // 10: server.Metadata.indices:type_name -> server.Metadata.IndicesEntry
	1,  // 11: server.Xyt.AddSchema:input_type -> server.Schema
	5,  // 12: server.Xyt.Insert:input_type -> server.Record
	2,  // 13: server.Xyt.Select:input_type -> server.Query
	11, // 14: server.Xyt.Version:input_type -> google.protobuf.Empty
	11, // 15: server.Xyt.AddSchema:output_type -> google.protobuf.Empty
	11, // 16: server.Xyt.Insert:output_type -> google.protobuf.Empty
	5,  // 17: server.Xyt.Select:output_type -> server.Record
	7,  // 18: server.Xyt.Version:output_type -> server.VersionMessage
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	file_server_proto_msgTypes[1].OneofWrappers = []any{
		(*Query_XAll)(nil),
		(*Query_XValue)(nil),
		(*Query_XRange)(nil),
		(*Query_YAll)(nil),
		(*Query_YValue)(nil),
		(*Query_YRange)(nil),
		(*Query_TAll)(nil),
		(*Query_TValue)(nil),
		(*Query_TRange)(nil),
		(*Query_TimeAll)(nil),
		(*Query_TimeRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_server_proto_rawDesc), len(file_server_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}
