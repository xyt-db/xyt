// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.1
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Xyt_AddSchema_FullMethodName = "/server.Xyt/AddSchema"
	Xyt_Insert_FullMethodName    = "/server.Xyt/Insert"
	Xyt_Select_FullMethodName    = "/server.Xyt/Select"
	Xyt_Version_FullMethodName   = "/server.Xyt/Version"
)

// XytClient is the client API for Xyt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XytClient interface {
	AddSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Record, emptypb.Empty], error)
	Select(ctx context.Context, in *Query, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Record], error)
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionMessage, error)
}

type xytClient struct {
	cc grpc.ClientConnInterface
}

func NewXytClient(cc grpc.ClientConnInterface) XytClient {
	return &xytClient{cc}
}

func (c *xytClient) AddSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Xyt_AddSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xytClient) Insert(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Record, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Xyt_ServiceDesc.Streams[0], Xyt_Insert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Record, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Xyt_InsertClient = grpc.ClientStreamingClient[Record, emptypb.Empty]

func (c *xytClient) Select(ctx context.Context, in *Query, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Record], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Xyt_ServiceDesc.Streams[1], Xyt_Select_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Query, Record]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Xyt_SelectClient = grpc.ServerStreamingClient[Record]

func (c *xytClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionMessage)
	err := c.cc.Invoke(ctx, Xyt_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XytServer is the server API for Xyt service.
// All implementations must embed UnimplementedXytServer
// for forward compatibility.
type XytServer interface {
	AddSchema(context.Context, *Schema) (*emptypb.Empty, error)
	Insert(grpc.ClientStreamingServer[Record, emptypb.Empty]) error
	Select(*Query, grpc.ServerStreamingServer[Record]) error
	Version(context.Context, *emptypb.Empty) (*VersionMessage, error)
	mustEmbedUnimplementedXytServer()
}

// UnimplementedXytServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXytServer struct{}

func (UnimplementedXytServer) AddSchema(context.Context, *Schema) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchema not implemented")
}
func (UnimplementedXytServer) Insert(grpc.ClientStreamingServer[Record, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedXytServer) Select(*Query, grpc.ServerStreamingServer[Record]) error {
	return status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedXytServer) Version(context.Context, *emptypb.Empty) (*VersionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedXytServer) mustEmbedUnimplementedXytServer() {}
func (UnimplementedXytServer) testEmbeddedByValue()             {}

// UnsafeXytServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XytServer will
// result in compilation errors.
type UnsafeXytServer interface {
	mustEmbedUnimplementedXytServer()
}

func RegisterXytServer(s grpc.ServiceRegistrar, srv XytServer) {
	// If the following call pancis, it indicates UnimplementedXytServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Xyt_ServiceDesc, srv)
}

func _Xyt_AddSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XytServer).AddSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Xyt_AddSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XytServer).AddSchema(ctx, req.(*Schema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xyt_Insert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XytServer).Insert(&grpc.GenericServerStream[Record, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Xyt_InsertServer = grpc.ClientStreamingServer[Record, emptypb.Empty]

func _Xyt_Select_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XytServer).Select(m, &grpc.GenericServerStream[Query, Record]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Xyt_SelectServer = grpc.ServerStreamingServer[Record]

func _Xyt_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XytServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Xyt_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XytServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Xyt_ServiceDesc is the grpc.ServiceDesc for Xyt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Xyt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Xyt",
	HandlerType: (*XytServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSchema",
			Handler:    _Xyt_AddSchema_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Xyt_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Insert",
			Handler:       _Xyt_Insert_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Select",
			Handler:       _Xyt_Select_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
